// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDetection = `-- name: CreateDetection :one
INSERT INTO detections (device_id, label, confidence)
VALUES ($1, $2, $3)
RETURNING id, device_id, created_at, label, confidence
`

type CreateDetectionParams struct {
	DeviceID   int64   `db:"device_id" json:"device_id"`
	Label      string  `db:"label" json:"label"`
	Confidence float64 `db:"confidence" json:"confidence"`
}

// ---------------
// Detections
// ---------------
func (q *Queries) CreateDetection(ctx context.Context, arg CreateDetectionParams) (Detection, error) {
	row := q.db.QueryRow(ctx, createDetection, arg.DeviceID, arg.Label, arg.Confidence)
	var i Detection
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.CreatedAt,
		&i.Label,
		&i.Confidence,
	)
	return i, err
}

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (name, device_url)
VALUES ($1, $2)
RETURNING id, name, device_url
`

type CreateDeviceParams struct {
	Name      string `db:"name" json:"name"`
	DeviceUrl string `db:"device_url" json:"device_url"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice, arg.Name, arg.DeviceUrl)
	var i Device
	err := row.Scan(&i.ID, &i.Name, &i.DeviceUrl)
	return i, err
}

const createTestDevice = `-- name: CreateTestDevice :one
INSERT INTO devices (name, device_url)
VALUES ($1, $2)
RETURNING id, name, device_url
`

type CreateTestDeviceParams struct {
	Name      string `db:"name" json:"name"`
	DeviceUrl string `db:"device_url" json:"device_url"`
}

func (q *Queries) CreateTestDevice(ctx context.Context, arg CreateTestDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createTestDevice, arg.Name, arg.DeviceUrl)
	var i Device
	err := row.Scan(&i.ID, &i.Name, &i.DeviceUrl)
	return i, err
}

const deleteBeats = `-- name: DeleteBeats :exec
DELETE
FROM device_heartbeats
WHERE device_id = $1
`

func (q *Queries) DeleteBeats(ctx context.Context, deviceID int64) error {
	_, err := q.db.Exec(ctx, deleteBeats, deviceID)
	return err
}

const deleteDetections = `-- name: DeleteDetections :exec
DELETE
FROM detections
WHERE device_id = $1
`

func (q *Queries) DeleteDetections(ctx context.Context, deviceID int64) error {
	_, err := q.db.Exec(ctx, deleteDetections, deviceID)
	return err
}

const getDetectionsAfter = `-- name: GetDetectionsAfter :many
SELECT id, device_id, created_at, label, confidence
FROM detections
WHERE created_at >= $1
ORDER BY created_at DESC
`

func (q *Queries) GetDetectionsAfter(ctx context.Context, createdAt pgtype.Timestamptz) ([]Detection, error) {
	rows, err := q.db.Query(ctx, getDetectionsAfter, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Detection{}
	for rows.Next() {
		var i Detection
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.CreatedAt,
			&i.Label,
			&i.Confidence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceById = `-- name: GetDeviceById :one
SELECT id, name, device_url
FROM devices
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetDeviceById(ctx context.Context, id int64) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceById, id)
	var i Device
	err := row.Scan(&i.ID, &i.Name, &i.DeviceUrl)
	return i, err
}

const getDeviceDetectionsAfter = `-- name: GetDeviceDetectionsAfter :many
SELECT id, device_id, created_at, label, confidence
FROM detections
WHERE device_id = $1
  AND created_at >= $2
ORDER BY created_at DESC
`

type GetDeviceDetectionsAfterParams struct {
	DeviceID  int64              `db:"device_id" json:"device_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

func (q *Queries) GetDeviceDetectionsAfter(ctx context.Context, arg GetDeviceDetectionsAfterParams) ([]Detection, error) {
	rows, err := q.db.Query(ctx, getDeviceDetectionsAfter, arg.DeviceID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Detection{}
	for rows.Next() {
		var i Detection
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.CreatedAt,
			&i.Label,
			&i.Confidence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceHeartBeats = `-- name: GetDeviceHeartBeats :many

SELECT id, device_id, created_at
FROM device_heartbeats
WHERE device_id = $1
  and created_at >= $2
ORDER BY created_at DESC
`

type GetDeviceHeartBeatsParams struct {
	DeviceID  int64              `db:"device_id" json:"device_id"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

// ---------------
// HeartBeats
// ---------------
func (q *Queries) GetDeviceHeartBeats(ctx context.Context, arg GetDeviceHeartBeatsParams) ([]DeviceHeartbeat, error) {
	rows, err := q.db.Query(ctx, getDeviceHeartBeats, arg.DeviceID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DeviceHeartbeat{}
	for rows.Next() {
		var i DeviceHeartbeat
		if err := rows.Scan(&i.ID, &i.DeviceID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevices = `-- name: GetDevices :many
SELECT id, name, device_url
FROM devices
order by name
`

func (q *Queries) GetDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Device{}
	for rows.Next() {
		var i Device
		if err := rows.Scan(&i.ID, &i.Name, &i.DeviceUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const heartBeatsAfter = `-- name: HeartBeatsAfter :many
SELECT id, device_id, created_at
FROM device_heartbeats
WHERE created_at >= $1
ORDER BY created_at DESC
`

func (q *Queries) HeartBeatsAfter(ctx context.Context, createdAt pgtype.Timestamptz) ([]DeviceHeartbeat, error) {
	rows, err := q.db.Query(ctx, heartBeatsAfter, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DeviceHeartbeat{}
	for rows.Next() {
		var i DeviceHeartbeat
		if err := rows.Scan(&i.ID, &i.DeviceID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordBeat = `-- name: RecordBeat :one
INSERT INTO device_heartbeats (device_id)
VALUES ($1)
RETURNING id, device_id, created_at
`

func (q *Queries) RecordBeat(ctx context.Context, deviceID int64) (DeviceHeartbeat, error) {
	row := q.db.QueryRow(ctx, recordBeat, deviceID)
	var i DeviceHeartbeat
	err := row.Scan(&i.ID, &i.DeviceID, &i.CreatedAt)
	return i, err
}

const updateDevice = `-- name: UpdateDevice :exec
UPDATE devices
SET name       = $2,
    device_url = $3
WHERE id = $1
`

type UpdateDeviceParams struct {
	ID        int64  `db:"id" json:"id"`
	Name      string `db:"name" json:"name"`
	DeviceUrl string `db:"device_url" json:"device_url"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) error {
	_, err := q.db.Exec(ctx, updateDevice, arg.ID, arg.Name, arg.DeviceUrl)
	return err
}
